var app = angular.module("kwizletApp", ["ngRoute"]);app.factory('socketIO', function ($rootScope) {    var socket = io();    socket.on("connect", function () {        console.log("connected", socket.io.engine.id);    })    return {        on: function (eventName, callback) {            socket.on(eventName, function () {                var args = arguments;                $rootScope.$apply(function () {                    callback.apply(socket, args);                });            });        },        emit: function (eventName, data, callback) {            socket.emit(eventName, data, function () {                var args = arguments;                $rootScope.$apply(function () {                    if (callback) {                        callback.apply(socket, args);                    }                });            })        },        id: function () {            return socket.io.engine.id        }    };});// end of Socket.IO service for AngularJSapp.config(function ($routeProvider) {    $routeProvider        .when('/home', {            templateUrl: 'views/home.html',            controller: 'loginController'        })        .when('/student', {            templateUrl: 'views/student.html',            controller: 'loginController'        })        .when('/quizOverview', {            templateUrl: 'views/quizes.html',            controller: 'quizOverviewController'        })        .when('/loading', {            templateUrl: 'views/loading.html',            controller: 'loadingController'        })        .when('/loading/:name', {            templateUrl: 'views/loading.html',            controller: 'loadingController'        })        .when("/newQuiz", {            templateUrl: "views/newQuiz.html",            controller: "questionOverviewController"        })        .when('/quiz/:name', {            templateUrl: 'views/quiz.html',            controller: 'quizController'        })        .otherwise({            redirectTo: '/home'        });})app.controller("loginController", function ($scope, $http, $window, $routeParams, $location) {    $scope.loginInfo = {        userName: "",        password: ""    }    $scope.doeLogin = function () {        alert("doeLogin: " + $scope.loginInfo.userName + ", " + $scope.loginInfo.password);        $http.post("/login", $scope.loginInfo)            .success(function (replyData) {                $window.location = "/#/quizOverview";            })            .error(function (errorData, status) {                alert("LOGIN AJAX ERROR");                console.log("LOGIN AJAX ERROR", status, errorData);            })    }    $scope.studentInfo = {        name: ""    }    $scope.studentLogin = function () {        $location.path("/loading/" + $scope.studentInfo.name);    }});app.controller("quizOverviewController", function ($scope, $http) {    $scope.quizList = [];    console.log("Quiz overview Controller");    // $http.get("api/v1/quizes")    $http.get("/quiz/quizes")        .success(function (data) {            console.log(data);            $scope.quizList = data;        })        .error(function () {            console.log("can't find api/v1 in quizOverviewController ");        });});app.controller("questionOverviewController", function ($scope, $http) {    console.log("Question overview Controller");    $scope.viewStyle = "list";    $scope.questionList = [];    $http.get("/quiz/newQuiz")        .success(function (data) {            console.log(data);            $scope.questionList = data;        })        .error(function () {            console.log("can't find api/v1 in questionOverviewController ");        });});app.controller("newQuizController", function ($scope, $location, $http) {    console.log("New Quiz Controller");    $scope.questionArray = [];    $scope.voegAanQuiz = function (questioni) {        $scope.questionArray.push(questioni)        console.log($scope.questionArray);    }//    $scope.test = function () {//        console.log("lars klik: " + $scope.questionList);//    }    $scope.addNewMovie = function () {        console.log("ANM");        console.log($scope.newQuizName);        var quizObject = {};        quizObject.name = $scope.newQuizName;        quizObject.questions = $scope.questionArray;        $http.post("quiz/newquiz", quizObject)            .success(function (storedQuiz) {                console.log("storedMovie:", storedQuiz);                $location.path("/quizOverview");            })            .error(function (data, status) {                alert("AJAX ERROR");                console.log("ERROR: addQuiz", status, data);            });//        $scope.quizList.push(quizObject);//        console.log("lars: " + $scope.questionList);    };});app.controller("quizController", function ($scope, $http) {});// end of Socket.IO service for AngularJSapp.controller("loadingController", function ($scope, $routeParams, socketIO) {    socketIO.emit("sign in", $routeParams.name);    console.log($routeParams);    socketIO.on("sign in reply", function (students) {        console.log("SIGNINREPLY:", students);        $scope.studentSet = students;        $scope.student = $scope.studentSet[ socketIO.id() ]; // We're storing the student in an object        // indexed by socket-id (see server code).        // We no longer have to rely on the current        // student being the last student in the array.    });    socketIO.on("new student", function (newStudentInfo) {        $scope.studentSet[newStudentInfo.socketId] = newStudentInfo;    })    socketIO.on("update other student", function (studentInfo) {        // In class, we used a for-loop to find the student in the array, like this:        // for( var idx=0; idx< $scope.studentList.length; idx++) {        //    if( studentInfo.name === $scope.studentList[idx].name ) {        //       $scope.studentList[idx] = studentInfo;        //    }        // }        // Now, because we use an object to store all students, we just need this:        $scope.studentSet[studentInfo.socketId] = studentInfo; // similar to "new student" function above    })    socketIO.on("student has left", function (id) {        delete $scope.studentSet[id];    });    // This is no longer an array. We'll use a JS object where the keys    // are socket ids, and the values are student-objects.    // Therefore the name is changed from "studentList" to "studentSet".    $scope.studentSet = null;    $scope.student = null;    $scope.key = function (evt) {        /*console.log("KEY:", evt.keyCode);         var step = 15;         if (evt.keyCode == 37) { //LEFT         $scope.student.x -= step;         evt.preventDefault();         }*/        socketIO.emit("update student", $scope.student);    }});